###########################################################################
#
# Copyright 2016 Samsung Electronics All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific
# language governing permissions and limitations under the License.
#
###########################################################################

# OpenOCD config used to write firmware to
# S5J internal flash memory via FTDI
# USB FT2232H (SIDK S5JT200 Board)

#daemon configuration
telnet_port 4444
gdb_port 3333

#interface
interface ft2232
ft2232_layout "usbjtag"
ft2232_vid_pid 0x0403 0x6010
ft2232_device_desc "Dual RS232-HS A"

#ft2232_serial SIDK_S5JT200_8A
reset_config trst_and_srst srst_push_pull srst_nogate connect_assert_srst

set _CHIPNAME s5jt200
set _ENDIAN little
set _CPUTAPID 0x4BA00477

adapter_khz 2000

# jtag scan chain
set _ARM_CR4_JTAGID1 0x3ba00477
set _ARM_CR4_JTAGID2 0x4ba00477
set _ARM_CR4_JTAGID3 0x5ba00477

jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

set _TARGETNAME $_CHIPNAME.cpu

target create $_TARGETNAME cortex_r4 -endian $_ENDIAN -chain-position $_TARGETNAME -dbgbase 0x801E0000

proc jtag_init {} {
	debug_level -1
	global _TARGETNAME
	jtag_reset 0 0
	jtag arp_init
	$_TARGETNAME arp_examine
	reset halt
	cmu_init
	enable_region
	flash_erase_romfs
	fusing_image_romfs
	reset
	shutdown
}

proc cmu_init {} {
	echo "----------------------------------------------------------------------"
	echo "CMU initialize"
	echo "----------------------------------------------------------------------"
	mww 0x80081818 0x00000002
	mww 0x8008181c 0x00000001
	mww 0x80081814 0x00000001
	mww 0x80081804 0x00000000
	mww 0x80081808 0x00000000
	mww 0x8008180c 0x00000000
	mww 0x80081810 0x00000000
	mww 0x80081800 0x00000003
	mww 0x80080000 0x007f0000
	mww 0x80080004 0x03104000
	mww 0x80080014 0x1071bf00
	mww 0x80081000 0x00000000
	mww 0x8008100c 0x00000000
	mww 0x80080180 0x00000010
	echo "Done"
}

proc enable_region {} {
	echo "----------------------------------------------------------------------"
	echo "Region enable"
	echo "----------------------------------------------------------------------"
	arm mcr 15 0 6 2 0 0x0
	arm mcr 15 0 6 1 4 0x300
	arm mcr 15 0 6 1 2 0x3F
	arm mcr 15 0 6 1 0 0x0
	
	arm mcr 15 0 6 2 0 0x4
	arm mcr 15 0 6 1 4 0x300
	arm mcr 15 0 6 1 2 0x3F
	arm mcr 15 0 6 1 0 0x60000000
	
	arm mcr 15 0 1 0 0 0x00e50879
	echo "Done"
}

proc flash_erase_romfs {} {
	echo "Erase ROMFS region @ mirror_addr 0x60690000 (phy_addr:0x04690000) size 512K"
	echo "Please confirm romfs partition phy addr in bootup log"
	flash_erase 0x60690000 0x80000
}

proc flash_erase {write_addr write_size} {
	global flash_write_addr flash_base target_addr end_addr
	set flash_write_addr $write_addr
	set flash_base 0x04000000
	set target_addr [expr $flash_write_addr-$flash_base]
	set end_addr [expr $target_addr+$write_size]
	while {$target_addr<$end_addr} {
		mww 0x80310010 $target_addr
		mwb 0x8031005E 0xff
		set target_addr [expr $target_addr+0x1000]
		flash_erase_wait
	}
}

proc flash_erase_wait {} {
	set SFLASH_RDSR	0x803100dc
	while {[expr [mrw $SFLASH_RDSR] & 0x01] != 0} { sleep 1 }
}

# mrw: "memory read word", returns value of $reg
proc mrw {reg} {
	set value ""
	mem2array value 32 $reg 1
	return $value(0)
}

proc fusing_image_romfs {} {
	echo "----------------------------------------------------------------------"
	echo "Fusing ROMFS @ mirror_addr 0x60690000 (phy_addr:0x04690000) "
	echo "----------------------------------------------------------------------"
	set ROMFS_PATH "../../../../../tinyara/build/output/bin/romfs.img"
	load_image $ROMFS_PATH 0x60690000
	echo "Done"
}
